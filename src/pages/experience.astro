---
import { getCollection } from 'astro:content'

import PageLayout from '@/layouts/PageLayout.astro'
import { useTranslations } from '@/i18n/utils'

const t = useTranslations('en')

const collection = (await getCollection('job'))
	.filter((item) => item.id.split('/')[0] === 'en')
	.sort(
		(a, b) =>
			new Date(b.data.dateStart).getTime() -
			new Date(a.data.dateStart).getTime()
	)

const jobs = await Promise.all(
	collection.map(async (item) => {
		const { Content } = await item.render()
		return { ...item, Content }
	})
)

function formatWorkDate(input: Date | string) {
	if (typeof input === 'string') return input
	const month = input.toLocaleDateString('en', { month: 'short' })
	const year = new Date(input).getFullYear()
	return `${month} ${year}`
}
---

<PageLayout title={t('experience.title')} description={t('experience.description')}>
	<div class='absolute inset-0 block dark:hidden'>
		<div id='particles1' class='fixed inset-0'></div>
		<div id='particles2' class='fixed inset-0'></div>
		<div id='particles3' class='fixed inset-0'></div>
	</div>

	<!-- Dark Theme: Stars -->
	<div class='absolute inset-0 bg-black hidden dark:block'>
		<div id='stars1' class='fixed inset-0'></div>
		<div id='stars2' class='fixed inset-0'></div>
		<div id='stars3' class='fixed inset-0'></div>
	</div>

	<script is:inline src='/js/bg.js'></script>

	<!-- Sphere -->
	<section class='relative h-[16vh] w-full'>
		<div id='sphere-wrapper' class='animateWithRotate absolute inset-0 top-2/4'>
			<div
				id='sphere-inner'
				class='absolute top-0 left-1/2 -translate-x-1/2 w-[250vw] min-h-[75vh] aspect-square rounded-full p-[5px] bg-gradient-to-b from-primary/75 dark:from-primary/25 dark:to-white/25 from-0% to-5%'
			>
				<div
					id='sphere-content'
					class='w-full h-full bg-white dark:bg-black rounded-full p-[1px] overflow-hidden flex justify-center'
				>
					<div
						id='sphere-blur'
						class='w-full h-20 rounded-full bg-neutral-900/15 dark:bg-white/5 blur-2xl'
					>
					</div>
				</div>
			</div>
		</div>
		<div
			class='animateWithRotate absolute h-[16vh] mt-5 w-full flex items-center justify-center'
		>
			<div
				class='relative flex-col w-full h-[16vh] flex items-center justify-center'
			>
				<div class='p-5 text-center'>
					<p
						class='animated rotate-180 text-xl md:text-2xl lg:text-3xl font-bold uppercase text-black dark:text-white'
					>
						{t('experience.title')}
					</p>
				</div>
			</div>
		</div>
	</section>
	<section class='relative w-[50vw] mt-16 self-center'>
		{
			jobs.map((entry) => (
				<li class='animate bg-white/75 dark:bg-black/75 border-b border-primary/75 mt-4 py-8 first-of-type:mt-0 first-of-type:pt-0 last-of-type:border-none'>
					<div class='text-sm uppercase mb-4'>
						{formatWorkDate(entry.data.dateStart)} -{' '}
						{entry.data.dateEnd
							? formatWorkDate(entry.data.dateEnd)
							: t('experience.present')}
					</div>
					<div class='text-black dark:text-white font-semibold'>
						{entry.data.company}
					</div>
					<div class='text-sm font-semibold'>{entry.data.role}</div>
					<article class='prose dark:prose-invert'>
						<entry.Content />
					</article>
					{Array.isArray(entry.data.tags) && (
						<div class='flex flex-wrap content-around gap-2'>
							{entry.data.tags.map((item) => (
								<div class='cursor-default w-fit px-3 py-2 group rounded border flex gap-2 items-center border-neutral-200 dark:border-neutral-700 hover:bg-neutral-100 hover:dark:bg-neutral-800 blend'>
									<span class='text-sm capitalize text-neutral-500 dark:text-neutral-400 group-hover:text-black group-hover:dark:text-white blend'>
										{item}
									</span>
								</div>
							))}
						</div>
					)}
				</li>
			))
		}
	</section>
</PageLayout>
