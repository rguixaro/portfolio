---
import { LINKS } from '@/consts'
import { cn } from '@/lib/utils'

import {
	getLangFromUrl,
	getRouteFromUrl,
	inRoute,
	useTranslatedPath,
	useTranslations,
} from '@/i18n/utils'
import { languages } from '@/i18n/ui'

const lang = getLangFromUrl(Astro.url)
const route = getRouteFromUrl(Astro.url)
const translatePath = useTranslatedPath(lang)
const t = useTranslations(lang)
---

<astro-lang id='lang' lang={lang}></astro-lang>

<div
	id='drawer'
	class:list={cn(
		'fixed inset-0 h-0 z-40 overflow-hidden',
		'flex flex-col items-center justify-start md:hidden',
		'bg-neutral-100 dark:bg-neutral-900',
		'transition-[height] duration-300 ease-in-out',
		route && 'mr-80'
	)}
>
	<div>
		<nav class='flex flex-col items-center space-y-2 pt-52'>
			{
				LINKS.map(({ ID, HREF }) => (
					<a
						href={translatePath(HREF)}
						class:list={cn(
							'flex items-center justify-center px-3 py-1 rounded-full',
							'text-current hover:text-black dark:hover:text-white',
							'hover:bg-black/5 dark:hover:bg-white/20',
							'transition-colors duration-300 ease-in-out',
							inRoute(HREF, route)
								? 'pointer-events-none bg-black dark:bg-white text-white dark:text-black'
								: ''
						)}>
						{t(`nav.${ID}`)}
					</a>
				))
			}
		</nav>
		<div class='flex gap-1 mt-5'>
			<div
				id='drawer-lang-button'
				aria-label={'Change language'}
				class='size-9 w-32 flex flex-col rounded-full p-2 mx-2 items-center justify-evenly bg-transparent hover:bg-black/5 dark:hover:bg-white/20 stroke-current hover:stroke-black hover:dark:stroke-white border border-black/10 dark:border-white/25 transition-all duration-300 ease-in-out delay-200'
			>
				{
					languages.map(({ CODE, NAME }) => (
						<a
							href={
								lang !== CODE
									? translatePath(`/${route || ''}`, CODE)
									: null
							}
							id={`drawer-lang-button-${CODE}`}
							class='hidden opacity-0 px-2 items-center justify-center bg-transparent transition-opacity duration-300'>
							<span class='text-sm  light:text-black'>{NAME}</span>
						</a>
					))
				}
			</div>
			<button
				id='drawer-theme-button'
				aria-label={'Toggle light and dark theme'}
				class='size-9 rounded-full p-2 mx-2 items-center justify-center bg-transparent hover:bg-black/5 dark:hover:bg-white/20 stroke-current hover:stroke-black hover:dark:stroke-white border border-black/10 dark:border-white/25 transition-colors duration-300 ease-in-out'
			>
				<svg class='block dark:hidden size-full'>
					<use href='/ui.svg#sun'></use>
				</svg>
				<svg class='hidden dark:block size-full'>
					<use href='/ui.svg#moon'></use>
				</svg>
			</button>
		</div>
	</div>
</div>

<style>
	#drawer.open {
		@apply h-full;
	}
</style>

<script is:inline define:vars={{ lang, languages }}>
	let langVar = lang

	/**
	 * Toggles the visibility of the language buttons and their text/animations.
	 */
	function toggleLangs() {
		const langsButton = document.getElementById('drawer-lang-button')
		if (!langsButton) return

		const isOpen = langsButton.classList.contains('h-52')
		langsButton.classList.toggle('h-52')
		languages.forEach(({ CODE }) => {
			const isDefault = CODE === langVar
			const btn = document.getElementById(`drawer-lang-button-${CODE}`)
			if (!btn) return

			if (isDefault && isOpen) {
				btn.classList.remove('opacity-100')
				btn.classList.add('opacity-0')
				setTimeout(() => {
					btn.classList.remove('opacity-0')
					btn.classList.add('opacity-100')
				}, 300)
			} else if (!isDefault && isOpen) {
				btn.classList.add('opacity-0')
				btn.classList.remove('opacity-100')
				setTimeout(() => btn.classList.add('hidden'), 300)
			} else if (!isDefault) {
				setTimeout(() => {
					btn.classList.remove('hidden')
					btn.classList.remove('opacity-0')
					btn.classList.add('opacity-100')
				}, 300)
			}
		})
	}

	/**
	 * Initializes the language buttons and their event listeners.
	 */
	function initLangs() {
		const langsButton = document.getElementById('drawer-lang-button')
		langsButton?.addEventListener('click', toggleLangs)

		languages.forEach(({ CODE }) => {
			const btn = document.getElementById(`drawer-lang-button-${CODE}`)
			if (!btn) return

			if (CODE === langVar) {
				btn.classList.remove('hidden')
				btn.classList.add('opacity-100')
			}
		})
	}

	/**
	 * @type {EventListener}
Emitted when the Astro app has finished swapping the page content.
Controls if the language buttons should be re-initialized or not.
	 */
	document.addEventListener('astro:after-swap', () => {
		const newLang = document.getElementById('lang')?.lang
		const alreadyLoaded = document
			.getElementById(`drawer-lang-button-${langVar}`)
			?.classList.contains('opacity-100')
		if (newLang === langVar && !alreadyLoaded) initLangs()
		else langVar = newLang
	})
	initLangs()
</script>
