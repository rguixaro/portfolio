---
import { LINKS } from '@/consts'
import { cn } from '@/lib/utils'
const { pathname } = Astro.url

import {
	getRouteFromUrl,
	getLangFromUrl,
	useTranslatedPath,
	useTranslations,
	getRoute,
	inRoute,
} from '@/i18n/utils'
import { languages } from '@/i18n/ui'

const lang = getLangFromUrl(Astro.url)
const route = getRouteFromUrl(Astro.url)
const routeWithoutLang = pathname?.toString()?.replace(`/${lang}`, '')
const translatePath = useTranslatedPath(lang)
const t = useTranslations(lang)
---

<div
	id='drawer'
	class='fixed inset-0 h-0 z-40 overflow-hidden flex flex-col items-center justify-center md:hidden bg-neutral-100 dark:bg-neutral-900 transition-[height] duration-300 ease-in-out'
>
	<nav class='flex flex-col items-center space-y-2'>
		{
			LINKS.map(({ ID, HREF }) => (
				<a
					href={getRoute(ID, lang)}
					class={cn(
						'flex items-center justify-center px-3 py-1 rounded-full',
						'text-current hover:text-black dark:hover:text-white',
						'hover:bg-black/5 dark:hover:bg-white/20',
						'transition-colors duration-300 ease-in-out',
						inRoute(HREF, routeWithoutLang)
							? 'pointer-events-none bg-black dark:bg-white text-white dark:text-black'
							: ''
					)}>
					{/*@ts-ignore */}
					{t(`nav.${ID}`)}
				</a>
			))
		}
	</nav>

	<div class='flex gap-1 mt-5'>
		<div
			id='drawer-lang-button'
			aria-label={`Change language`}
			class='size-9 w-32 flex flex-col rounded-full p-2 mx-2 items-center justify-evenly bg-transparent hover:bg-black/5 dark:hover:bg-white/20 stroke-current hover:stroke-black hover:dark:stroke-white border border-black/10 dark:border-white/25 transition-all duration-300 ease-in-out delay-200'
		>
			{
				languages.map(({ CODE, NAME }) => (
					<a
						href={translatePath(`/${route ? route : ''}`, CODE)}
						id={`drawer-lang-button-${CODE}`}
						class='hidden opacity-0 px-2 items-center justify-center bg-transparent transition-opacity duration-300'>
						<span class='text-sm  light:text-black'>{NAME}</span>
					</a>
				))
			}
		</div>
		<button
			id='drawer-theme-button'
			aria-label={`Toggle light and dark theme`}
			class='size-9 rounded-full p-2 mx-2 items-center justify-center bg-transparent hover:bg-black/5 dark:hover:bg-white/20 stroke-current hover:stroke-black hover:dark:stroke-white border border-black/10 dark:border-white/25 transition-colors duration-300 ease-in-out'
		>
			<svg class='block dark:hidden size-full'>
				<use href='/ui.svg#sun'></use>
			</svg>
			<svg class='hidden dark:block size-full'>
				<use href='/ui.svg#moon'></use>
			</svg>
		</button>
	</div>
</div>

<style>
	#drawer.open {
		@apply h-full;
	}
</style>

<script is:inline define:vars={{ lang, languages }}>
	function toggleLangs() {
		const langsButton = document.getElementById('drawer-lang-button')
		if (!langsButton) return

		const isOpen = langsButton.classList.contains('h-52')
		langsButton.classList.toggle('h-52')
		languages.forEach(({ CODE }) => {
			const isDefault = CODE === lang
			const btn = document.getElementById(`drawer-lang-button-${CODE}`)
			if (!btn) return

			if (isDefault && isOpen) {
				btn.classList.remove('opacity-100')
				btn.classList.add('opacity-0')
				setTimeout(() => {
					btn.classList.remove('opacity-0')
					btn.classList.add('opacity-100')
				}, 300)
			} else if (!isDefault && isOpen) {
				btn.classList.add('opacity-0')
				btn.classList.remove('opacity-100')
				setTimeout(() => btn.classList.add('hidden'), 300)
			} else if (!isDefault) {
				setTimeout(() => {
					btn.classList.remove('hidden')

					btn.classList.remove('opacity-0')
					btn.classList.add('opacity-100')
				}, 300)
			}
		})
	}

	function initLangs() {
		const langsButton = document.getElementById('drawer-lang-button')
		langsButton?.addEventListener('click', toggleLangs)

		languages.forEach(({ CODE }) => {
			const btn = document.getElementById(`drawer-lang-button-${CODE}`)
			if (!btn) return

			if (CODE === lang) {
				btn.classList.remove('hidden')
				btn.classList.add('opacity-100')
			}
		})
	}

	initLangs()
</script>
