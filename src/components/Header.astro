---
import { getRelativeLocaleUrl } from 'astro:i18n'

import { LINKS } from '@/consts'
import { cn } from '@/lib/utils'
import Container from '@/components/Container.astro'
const { pathname } = Astro.url

import {
	getRouteFromUrl,
	getLangFromUrl,
	useTranslatedPath,
	useTranslations,
} from '@/i18n/utils'
import { languages } from '@/i18n/ui'

const lang = getLangFromUrl(Astro.url)
const route = getRouteFromUrl(Astro.url)
const routeWithoutLang = pathname?.toString()?.replace(`/${lang}`, '')
const translatePath = useTranslatedPath(lang)
const t = useTranslations(lang)
---

<header id='header' class='fixed top-0 w-full h-16 z-50'>
	<Container size='md'>
		<div class='relative h-full w-full'>
			<div class='absolute left-1/4 top-1/2 -translate-x-1/2 -translate-y-1/2'>
				<nav
					class='hidden md:flex items-center justify-center text-sm gap-5'
				>
					{
						LINKS.map(({ ID, HREF }) => (
							<a
								href={getRelativeLocaleUrl(
									lang,
									/** @ts-ignore */
									t(`nav.${ID}`).toLowerCase()
								)}
								class={cn(
									'h-8 rounded-full px-3 text-current',
									'flex items-center justify-center',
									'transition-colors duration-300 ease-in-out',
									routeWithoutLang === HREF
										? 'bg-primary dark:bg-primary text-white dark:text-white font-bold'
										: 'hover:bg-black/5 dark:hover:bg-white/10 opacity-75 hover:text-black dark:hover:text-white hover:translate-y-1 transition'
								)}>
								{/*@ts-ignore */}
								{t(`nav.${ID}`)}
							</a>
						))
					}
				</nav>
			</div>

			<div
				class='buttons absolute right-0 top-1/2 -translate-y-1/2 flex gap-1'
			>
				<div
					id='header-lang-button'
					aria-label={`Change language`}
					class='hidden md:flex size-9 rounded-full p-2 mx-2 items-center justify-center bg-transparent stroke-current border border-black/10 dark:border-white/25 duration-300 ease-in-out transition-all delay-200'
				>
					{
						languages.map(({ CODE }) => (
							<a
								href={
									lang !== CODE
										? translatePath(
												`/${route ? route : ''}`,
												CODE
											)
										: null
								}
								id={`header-lang-button-${CODE}`}
								aria-label={`Change language`}
								class='hidden px-2 opacity-0 items-center justify-center bg-transparent transition-opacity duration-200 delay-100'>
								<span class='text-md font-medium hover:font-bold light:text-black'>
									{CODE}
								</span>
							</a>
						))
					}
				</div>
				<button
					id='header-theme-button'
					aria-label={`Toggle light and dark theme`}
					class={'hidden md:flex size-9 rounded-full p-2 items-center justify-center bg-transparent hover:bg-black/5 dark:hover:bg-white/15 stroke-current hover:stroke-black hover:dark:stroke-white border border-black/10 dark:border-white/25 duration-300 ease-in-out hover:scale-105 transition hover:shadow-primary hover:dark:shadow-white hover:shadow-sm'}
				>
					<svg class='size-full block dark:hidden'>
						<use href='/ui.svg#sun'></use>
					</svg>
					<svg class='size-full hidden dark:block'>
						<use href='/ui.svg#moon'></use>
					</svg>
				</button>
				<button
					id='header-drawer-button'
					aria-label={`Toggle drawer open and closed`}
					class={'flex md:hidden size-9 rounded-full p-2 mx-2 items-center justify-center bg-transparent hover:bg-black/5 dark:hover:bg-white/20 stroke-current hover:stroke-black hover:dark:stroke-white border border-black/10 dark:border-white/25 transition-colors duration-300 ease-in-out'}
				>
					<svg id='drawer-open' class='size-full'>
						<use href='/ui.svg#menu'></use>
					</svg>
					<svg id='drawer-close' class='size-full'>
						<use href='/ui.svg#x'></use>
					</svg>
				</button>
			</div>
		</div>
	</Container>
</header>

<style>
	#header-drawer-button > #drawer-open {
		@apply block;
	}

	#header-drawer-button > #drawer-close {
		@apply hidden;
	}

	#header-drawer-button.open > #drawer-open {
		@apply hidden;
	}

	#header-drawer-button.open > #drawer-close {
		@apply block;
	}
</style>

<script is:inline>
	function toggleDrawer() {
		const drawer = document.getElementById('drawer')
		const drawerButton = document.getElementById('header-drawer-button')
		drawer?.classList.toggle('open')
		drawerButton?.classList.toggle('open')
	}

	function initDrawer() {
		const drawerButton = document.getElementById('header-drawer-button')
		drawerButton?.addEventListener('click', toggleDrawer)
	}

	document.addEventListener('astro:after-swap', initDrawer)
	initDrawer()
</script>

<!--  -->
<script is:inline define:vars={{ lang, languages }}>
	const effects = [
		'bg-black/5',
		'dark:bg-white/15',
		'stroke-black',
		'dark:stroke-white',
		'w-64',
		'shadow-primary',
		'dark:shadow-white',
		'shadow-sm',
	]
	let lastClick = 0

	function initLangs() {
		const langsButton = document.getElementById('header-lang-button')

		langsButton?.addEventListener('click', (event) => {
			if (!event.target.id.includes('header-lang-button')) return
			setTimeout(() => toggleLangs(), 100)
		})

		langsButton?.addEventListener('mouseleave', () => {
			setTimeout(() => toggleLangs(true), 100)
		})

		languages.forEach(({ CODE }) => {
			const btn = document.getElementById(`header-lang-button-${CODE}`)
			if (!btn) return

			if (CODE === lang) {
				btn.classList.replace('opacity-0', 'opacity-75')
				btn.classList.replace('hidden', 'flex')
				btn.children[0].classList.toggle('hover:font-bold')
				btn.children[0].classList.toggle('cursor-pointer')
			}
			btn.addEventListener('click', () => {
				if (lang === CODE) toggleLangs()
				else langsButton.classList.remove(...effects)
			})
		})
	}

	function toggleLangs(close = false) {
		const langsButton = document.getElementById('header-lang-button')
		const isOpen = langsButton.classList.contains('w-64')

		if (close & !isOpen || Date.now() - lastClick < 200) return
		else if (!close) lastClick = Date.now()

		if (!isOpen) langsButton.classList.add(...effects)
		else langsButton.classList.remove(...effects)

		languages.forEach(({ CODE, NAME }) => {
			const elem = document.getElementById(`header-lang-button-${CODE}`)
			if (!elem) return

			const { classList, children } = elem
			if (classList.contains('opacity-0')) classList.replace('hidden', 'flex')
			else if (CODE !== lang) classList.replace('flex', 'hidden')

			classList.replace('opacity-75', 'opacity-0')
			if (!isOpen && CODE === lang) classList.replace('flex', 'hidden')

			setTimeout(() => {
				if (!isOpen) {
					children[0].innerHTML = NAME
					children[0].classList.replace('text-md', 'text-sm')
					classList.replace('opacity-0', 'opacity-75')
				} else {
					children[0].innerHTML = CODE
					children[0].classList.replace('text-sm', 'text-md')
					if (CODE === lang) {
						classList.replace('opacity-0', 'opacity-75')
						classList.replace('hidden', 'flex')
					}
				}
			}, 200)
		})
	}

	initLangs()
</script>
