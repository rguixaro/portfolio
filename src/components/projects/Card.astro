---
import type { CollectionEntry } from 'astro:content'
import { Icon } from 'astro-icon/components'

import StackCard from '@/components/StackCard.astro'
import Links from '@/components/projects/Links.astro'
import type { TechStack } from '@/types'
import { getStack } from '@/lib/utils'

interface Props {
	entry: CollectionEntry<'project'>
	t: (key: string) => string
}

const { entry, t } = Astro.props
const {
	name,
	stack,
	url,
	github,
	googlePlay,
	appStore,
	logo,
	invert = false,
} = entry.data
const { Content } = await entry.render()

const techStack = getStack(stack)
---

<div
	class='border z-50 bg-white/75 dark:bg-black/75 border-primary/15 dark:border-white/20 w-full hover:shadow-lg transition-all duration-200 my-4 rounded-xl p-5 shadow-md'
>
	<div class='card-body grid grid-cols-4'>
		<div class='grid col-span-4'>
			<div class='grid grid-cols-3 gap-4 mb-2 justify-between items-center'>
				<div class='grid col-span-3'>
					<div class='flex flex-row items-center'>
						{
							!!logo && (
								<svg
									height='5rem'
									width='5rem'
									class={`mr-5 ${invert && 'dark:invert'}`}>
									<use href={logo} />
								</svg>
							)
						}
						<h1
							class='uppercase card-title font-extrabold tracking-tighter md:text-2xl'
						>
							{name}
						</h1>
					</div>
				</div>
				<div class='col-start-4 col-span-1 hidden sm:block'>
					<Links entry={entry} />
				</div>
			</div>
			<div class='grid grid-cols-1 col-span-1 gap-5 place-items-center'>
				<div class='self-start grid-cols-1 justify-self-start text-left'>
					<article>
						<Content />
					</article>
					{
						Array.isArray(stack) && (
							<div class='space-y-4'>
								<p class='font-semibold text-black dark:text-white'>
									{t('project.developed-with')}
								</p>
								<div class='flex flex-row justify-between'>
									<div class='flex flex-wrap content-around gap-2 my-4'>
										{techStack.map((item: TechStack) => (
											<StackCard
												text={item.NAME}
												icon={item.ICON}
											/>
										))}
									</div>
									<p class='flex font-semibold text-black dark:text-white'>
										{!!url && (
											<a
												href={url}
												target='_blank'
												class='cursor-pointer link link-hover text-sm text-right flex justify-center items-center my-5'>
												{'Visit '}
												{url !== '#' && (
													<Icon
														name='carbon:link'
														class='w-4 h-4 ml-2'
													/>
												)}
											</a>
										)}
									</p>
								</div>
							</div>
						)
					}
					{
						github || googlePlay || appStore ? (
							<div class='space-y-4 sm:hidden'>
								<p class='font-semibold text-black dark:text-white'>
									{t('project.links')}
								</p>
								<Links entry={entry} />
							</div>
						) : null
					}
				</div>
			</div>
		</div>
	</div>
</div>
